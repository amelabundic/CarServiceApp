@page "/termin/{id:int}"
@inject TerminService TerminService
@inject NavigationManager Navigation

<h3>Uredi termin</h3>

@if (termin == null)
{
    <p>Termin nije pronađen.</p>
}
else
{
    <EditForm Model="termin" OnValidSubmit="SpremiIzmjene">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-2">
            <label>Ime:</label>
            <InputText class="form-control" @bind-Value="termin.Ime" />
        </div>

        <div class="mb-2">
            <label>Prezime:</label>
            <InputText class="form-control" @bind-Value="termin.Prezime" />
        </div>

        <div class="mb-2">
            <label>Automobil:</label>
            <InputText class="form-control" @bind-Value="termin.Automobil" />
        </div>

        <div class="mb-2">
            <label>Datum:</label>
            <InputDate class="form-control" @bind-Value="termin.Datum" />
        </div>

        <div class="mb-2">
            <label>Problem:</label>
            <InputTextArea class="form-control" @bind-Value="termin.Problem" />
        </div>

        <button class="btn btn-success" type="submit">Spremi</button>
        <button class="btn btn-secondary ms-2" type="button" @onclick="VratiNazad">Nazad</button>
    </EditForm>
}

@code {
    [Parameter]
    public int id { get; set; }

    private Termin? termin;

    protected override async Task OnInitializedAsync()
    {
        termin = await TerminService.GetTerminByIdAsync(id);
    }

    private bool greska = false;

    private async Task SpremiIzmjene()
    {
        var success = await TerminService.UpdateTerminAsync(id, termin!);
        if (success)
        {
            Navigation.NavigateTo("/termini");
        }
        else
        {
            greska = true;
        }
    }


    private void VratiNazad()
    {
        Navigation.NavigateTo("/termini");
    }
}


